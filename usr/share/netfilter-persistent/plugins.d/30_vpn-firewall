#!/bin/bash

## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## netfilter-persistent uses run-parts which ignores files with extensions.
## This means the filename of this file without file extension is fine.
## Backup files "~", .dpkg-old etc. files would not be executed.

## --reject-with
## http://ubuntuforums.org/showthread.php?p=12011099

## Set to icmp-admin-prohibited because icmp-port-unreachable caused
## confusion. icmp-port-unreachable looks like a bug while
## icmp-admin-prohibited hopefully makes clear it is by design.

set -e
set -o errtrace

error_handler() {
  echo "##################################################"
  echo "VPN firewall script failed!"
  echo "##################################################"
  exit 1
}

trap "error_handler" ERR INT TERM

source_config_folder() {
   shopt -s nullglob
   for i in /etc/vpn-firewall.d/*.conf /rw/config/vpn-firewall.d/*.conf; do
      bash_n_exit_code="0"
      bash_n_output="$(bash -n "$i" 2>&1)" || { bash_n_exit_code="$?" ; true; };
      if [ ! "$bash_n_exit_code" = "0" ]; then
         echo "Invalid config file: $i
   bash_n_exit_code: $bash_n_exit_code
   bash_n_output:
   $bash_n_output" >&2
         exit 1
      fi
      source "$i"
   done
}

defaults() {
   [ -n "$iptables_cmd" ] || iptables_cmd="iptables --wait"
   [ -n "$ip6tables_cmd" ] || ip6tables_cmd="ip6tables --wait"
   [ -n "$VPN_INTERFACE" ] || VPN_INTERFACE="tun+"
   [ -n "$LOCAL_NET" ] || LOCAL_NET="192.168.1.0/24 192.168.0.0/24"
   [ -n "$TUNNEL_USER" ] || TUNNEL_USER="$(id -u tunnel)"
   ## Internal interface
   if [ -d "/usr/lib/qubes" ]; then
      [ -n "$INT_IF" ] || INT_IF="vif+"
   else
      [ -n "$INT_IF" ] || INT_IF="eth1"
   fi
   [ -n "$FORWARDING" ] || FORWARDING=false
}

root_check() {
   if [ "$(id -u)" != "0" ]; then
      echo "FATAL ERROR: This script must be run as root (sudo)!"
      exit 1
   fi
}

flush_rules_chains() {
   $iptables_cmd -F
   $iptables_cmd -X
   $iptables_cmd -t nat -F
   $iptables_cmd -t nat -X
   $iptables_cmd -t mangle -F
   $iptables_cmd -t mangle -X
}

start() {
   ###########################
   ## IPv4 DEFAULTS
   ###########################

   ## Set secure defaults.
   $iptables_cmd -P INPUT DROP

   ## FORWARD rules does not actually do anything if forwarding is disabled. Better be safe just in case.
   $iptables_cmd -P FORWARD DROP

   ## Only the VPN process is allowed to establish outgoing connections.
   $iptables_cmd -P OUTPUT DROP

   ###########################
   ## flush
   ###########################
   flush_rules_chains

   ############################
   ## IPv4 DROP INVALID PACKAGES
   ############################

   ## DROP INVALID
   $iptables_cmd -A INPUT -m state --state INVALID -j DROP

   ## DROP INVALID SYN PACKETS
   $iptables_cmd -A INPUT -p tcp --tcp-flags ALL ACK,RST,SYN,FIN -j DROP
   $iptables_cmd -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
   $iptables_cmd -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP

   ## DROP PACKETS WITH INCOMING FRAGMENTS. THIS ATTACK ONCE RESULTED IN KERNEL PANICS
   $iptables_cmd -A INPUT -f -j DROP

   ## DROP INCOMING MALFORMED XMAS PACKETS
   $iptables_cmd -A INPUT -p tcp --tcp-flags ALL ALL -j DROP

   ## DROP INCOMING MALFORMED NULL PACKETS
   $iptables_cmd -A INPUT -p tcp --tcp-flags ALL NONE -j DROP

   ###########################
   ## IPv4 INPUT
   ###########################

   ## Traffic on the loopback interface is accepted.
   $iptables_cmd -A INPUT -i lo -j ACCEPT

   ## Established incoming connections are accepted.
   $iptables_cmd -A INPUT -m state --state ESTABLISHED -j ACCEPT

   ## Allow all incoming connections on the virtual VPN network interface.
   $iptables_cmd -A INPUT -i "$VPN_INTERFACE" -j ACCEPT

   if [ "$FORWARDING" = "true" ]; then
      if [ -d "/usr/lib/qubes" ]; then
         if [ -e /var/run/qubes/qubes-ns ]; then
            ## sets: NS1
            ## sets: NS2
            source /var/run/qubes/qubes-ns

            grep ^nameserver /etc/resolv.conf | grep -v ":.*:" | head -2 |
               (
                  while read x y z ; do
                     etc_resolv_conf_dns_server="$y"

                     ## Without these rules, any VPN-Workstation would have to configure its /etc/resolv.conf to point
                     ## to the VPN nameserver.
                     ## Inspired by qubes-setup-dnat-to-ns.
                     ## https://github.com/QubesOS/qubes-core-agent-linux/blob/master/network/qubes-setup-dnat-to-ns

                     $iptables_cmd -t nat -A PREROUTING -d "$NS1" -p udp --dport 53 -j DNAT --to "$etc_resolv_conf_dns_server"
                     $iptables_cmd -t nat -A PREROUTING -d "$NS1" -p tcp --dport 53 -j DNAT --to "$etc_resolv_conf_dns_server"

                     $iptables_cmd -t nat -A PREROUTING -d "$NS2" -p udp --dport 53 -j DNAT --to "$etc_resolv_conf_dns_server"
                     $iptables_cmd -t nat -A PREROUTING -d "$NS2" -p tcp --dport 53 -j DNAT --to "$etc_resolv_conf_dns_server"
                  done
               )
         else
            echo "WARNING: /var/run/qubes/qubes-ns does not exist. \
DNS for VPN-Workstations will not work unless it gets manually configured to point to the VPN nameserver."
         fi
      fi

      $iptables_cmd -t nat -A POSTROUTING -j MASQUERADE
   fi

   ## Log.
   $iptables_cmd -A INPUT -j LOG --log-prefix "VPN firewall blocked input4: "

   ## Reject anything not explicitly allowed above.
   ## Drop is better than reject here, because ...
   $iptables_cmd -A INPUT -j DROP

   ###########################
   ## IPv4 FORWARD
   ###########################

   if [ "$FORWARDING" = "true" ]; then
      $iptables_cmd -A FORWARD -o "$VPN_INTERFACE" -j ACCEPT
      $iptables_cmd -A FORWARD -o "$INT_IF" -j ACCEPT
   fi

   ## Log.
   $iptables_cmd -A FORWARD -j LOG --log-prefix "VPN firewall blocked forward4: "

   ## Reject everything.
   $iptables_cmd -A FORWARD -j REJECT --reject-with icmp-admin-prohibited

   ###########################
   ## IPv4 OUTPUT
   ###########################

   ## Access to localhost is required,
   ## otherwise breaks applications such as konsole and kwrite.
   $iptables_cmd -A OUTPUT -o lo -j ACCEPT

   ## XXX
   $iptables_cmd -A OUTPUT -o "$VPN_INTERFACE" -j ACCEPT

   ## Connections to VPN servers are allowed,
   $iptables_cmd -A OUTPUT -m owner --uid-owner "$TUNNEL_USER" -j ACCEPT

   ## Existing connections are accepted.
   $iptables_cmd -A OUTPUT -m state --state ESTABLISHED -j ACCEPT

   ## Accept outgoing connections to local network.
   for NET in $LOCAL_NET; do
      $iptables_cmd -A OUTPUT -d "$NET" -j ACCEPT
   done

   ## Log.
   $iptables_cmd -A OUTPUT -j LOG --log-prefix "VPN firewall blocked output4: "

   ## Reject all other outgoing traffic.
   $iptables_cmd -A OUTPUT -j REJECT --reject-with icmp-admin-prohibited

   ###########################
   ## IPv6
   ###########################

   if ping -c 1 -W 1 ::1 > /dev/null 2> /dev/null; then

   ## Policy DROP for all traffic as fallback.
   $ip6tables_cmd -P INPUT DROP
   $ip6tables_cmd -P OUTPUT DROP
   $ip6tables_cmd -P FORWARD DROP

   ## Flush old rules.
   $ip6tables_cmd -F
   $ip6tables_cmd -X
   $ip6tables_cmd -t mangle -F
   $ip6tables_cmd -t mangle -X

   $ip6tables_cmd -A INPUT -i lo -j ACCEPT
   $ip6tables_cmd -A OUTPUT -o lo -j ACCEPT

   ## Log.
   #$ip6tables_cmd -A INPUT -j LOG --log-prefix "VPN firewall blocked input6: "
   #$ip6tables_cmd -A OUTPUT -j LOG --log-prefix "VPN firewall blocked output6: "
   #$ip6tables_cmd -A FORWARD -j LOG --log-prefix "VPN firewall blocked forward6: "

   ## Drop/reject all other traffic.
   $ip6tables_cmd -A INPUT -j DROP
   ## --reject-with icmp-admin-prohibited not supported by $ip6tables_cmd
   $ip6tables_cmd -A OUTPUT -j REJECT
   ## --reject-with icmp-admin-prohibited not supported by $ip6tables_cmd
   $ip6tables_cmd -A FORWARD -j REJECT

   else
        echo "OK: IPv6 suppot not avalaible on system"
   fi
 
   ###########################
   ## End
   ###########################

   echo "OK: The firewall should not show any messages,"
   echo "OK: besides output beginning with prefix OK:..."
   echo "OK: FORWARDING: $FORWARDING"
   echo "OK: VPN firewall loaded."
}

stop() {
   true
}

restart() {
   start
}

reload() {
   start
}

flush() {
   $iptables_cmd -P INPUT ACCEPT
   $iptables_cmd -P FORWARD ACCEPT
   $iptables_cmd -P OUTPUT ACCEPT

   $ip6tables_cmd -A INPUT -j ACCEPT
   $ip6tables_cmd -A OUTPUT -j ACCEPT
   $ip6tables_cmd -A FORWARD -j ACCEPT

   flush_rules_chains
   exit 0
}

save() {
   echo "Not implemented."
   exit 1
}

main() {
   case $1 in
      start)
          start "$@"
          ;;
      stop)
          stop "$@"
          ;;
      restart)
          restart "$@"
          ;;
      reload)
          reload "$@"
          ;;
      flush)
          flush "$@"
          ;;
      save)
          save "$@"
          ;;
      *)
          echo "Usage: ${0} (start|stop|restart|reload|flush|save)"
          ;;
   esac
}

source_config_folder "$@"
defaults "$@"
root_check "$@"
main "$@"
